""" {{ package_description }} """
from .client import AuthenticatedClient, Client
from .. import cli
from typing import Union
from .types import Unset, UNSET

from argparse import ArgumentParser

{% from "endpoint_macros.py.jinja" import header_params, cookie_params, query_params, json_body, multipart_body,
    arguments, client, kwargs, parse_response, docstring %}

{% for key, value in openapi.endpoint_collections_by_tag | dictsort if True or key in ('accounts', 'actions', 'customers', 'data_usages', 'domains', 'failover_ips', 'keys') %}
@cli.add_group('{{ key }}', help='Acess {{ key }} commands')
def {{ key }}(client):
    return False  # display help

{% for endpoint in value.endpoints %}

    {% for relative in endpoint.relative_imports %}
{{ relative.replace("...",".") }}
{% endfor %}


## endpoint:
@{{key}}.add_command('{{ endpoint.name }}', help='{{ endpoint.summary }}')
def {{ python_identifier(endpoint.name) }}(
     {#  arguments(endpoint) | indent(4) #}
    parser: ArgumentParser
    ):
    #print('endpoint {{ endpoint.name }}:')
    {% for parameter in endpoint.path_parameters.values() %}
    # {{ parameter }}
    parser.add_argument('{{ parameter.name }}',
        {% if parameter.description %}help="""{{ parameter.description }}""", {% endif %}
        )
    {% endfor %}

    {% set json_body = endpoint.json_body %}
    {% if json_body %}
    {% if json_body.class_info %}
    from .models.{{ endpoint.json_body.class_info.module_name }} import {{ endpoint.json_body.class_info.name }}
    {% endif %}
    {%  if json_body.get_instance_type_string() == 'list' %}
    {% set property = json_body.inner_property %}
    # {{ json_body }}, {{ property }}
    parser.add_argument('{{ key }}',
            nargs='*',
            {% if json_body.description %}help="""{{ json_body.description  }}""",{% endif %}
            )
    {% else %}
    {% for property in endpoint.json_body.required_properties + endpoint.json_body.optional_properties %}
    #property: {{  property }}
    #type: {{ property.get_instance_type_string() }}

    parser.add_argument('--{{  property.name.replace('_','-') }}',
            dest='{{  property.python_name }}',
            required={{ property.required }},
            help="""{{  property.description }}""",
            {%  if property.get_instance_type_string() == 'bool' %}
            action=cli.BooleanOptionalAction,
            {%  endif %}
            )
        {% endfor %}
        {% endif %}
    {% endif %}


    def request(
{% for parameter in endpoint.path_parameters.values() %}
{{ parameter.to_string() }},
{% endfor %}
{% if endpoint.requires_security %}
client: AuthenticatedClient,
{% else %}
client: Client,
{% endif %}
{% if json_body %}
{% if json_body.get_instance_type_string() == 'list' %}
{{ key }}: {{ json_body.get_type_string() }}
{% else %}
{% for property in endpoint.json_body.required_properties + endpoint.json_body.optional_properties %}
{{ property.to_string() }},
{% endfor %}
{% endif %}
{% endif %}
        ):
            from .api.{{ key }}.{{ python_identifier(endpoint.name) }} import sync
            return sync(
                {% for parameter in endpoint.path_parameters.values() %}
                    {{ parameter.python_name }} = {{ parameter.python_name }},
                    {% endfor %}
                client = client,
{% if json_body %}
{% if json_body.get_instance_type_string() == 'list' %}
json_body = {{ key }},
{% else %}
json_body = {{ endpoint.json_body.class_info.name }}(
{% for property in endpoint.json_body.required_properties + endpoint.json_body.optional_properties %}
{{ property.python_name }} = {{ property.python_name }},
{%  endfor %}
),
{% endif %}
{% endif %}
            )
    return request

    # {{endpoint.json_body}}
    #print(sync.__annotations__)
    #import inspect
    #for key, value in inspect.getmembers(sync):
     #   print(key, value)

    #result = sync(client = client)
    #print (result)
    #return True


{% endfor %}

{% endfor %}
