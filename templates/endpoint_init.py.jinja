""" Contains methods for accessing {{ endpoint_collection.tag }} endpoints """
from __future__ import annotations

from typing import List, Type
from binarylane.console.runners.module import ModuleRunner

__all__ = ['commands']
commands : List[Type[ModuleRunner]] = []

def register_command(cls: Type[ModuleRunner]) -> Type[ModuleRunner]:
    commands.append(cls)
    return cls

{% for endpoint in endpoint_collection.endpoints if not (endpoint.json_body and endpoint.json_body.template.startswith('union_')) %}
@register_command
class {{ class_name(endpoint.name) }}(ModuleRunner):
    """Runner for {{ endpoint.name }} API operation"""

    @property
    def name(self) -> str:
        return '{{ endpoint.name.split('_', 1)[1] }}'

    @property
    def description(self) -> str:
        return '{{ endpoint.summary }}'

    @property
    def module_path(self) -> str:
        return '.commands.{{ endpoint_collection.tag }}.{{ python_identifier(endpoint.name) }}'

{% endfor %}
